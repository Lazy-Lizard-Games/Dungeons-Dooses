[gd_scene load_steps=14 format=3 uid="uid://cvu7bdrfa8e16"]

[ext_resource type="Texture2D" uid="uid://d1yyafybnoiet" path="res://assets/characters/humans/human1/human1_animation5.png" id="2_glu7w"]
[ext_resource type="Texture2D" uid="uid://ord2rhtdpeh0" path="res://assets/characters/humans/human1/human1_animation6.png" id="3_4nb8b"]
[ext_resource type="Texture2D" uid="uid://ek1p08crbie4" path="res://assets/characters/humans/human1/human1_animation7.png" id="4_nsggh"]
[ext_resource type="Texture2D" uid="uid://b73fgctoiifo7" path="res://assets/characters/humans/human1/human1_animation1.png" id="5_vaqin"]
[ext_resource type="Texture2D" uid="uid://rx1xyajpjiv0" path="res://assets/characters/humans/human1/human1_animation2.png" id="6_ewpi5"]
[ext_resource type="Texture2D" uid="uid://t5waxiuuwljm" path="res://assets/characters/humans/human1/human1_animation3.png" id="7_c2lyn"]
[ext_resource type="Texture2D" uid="uid://br4yv54g3irt0" path="res://assets/characters/humans/human1/human1_animation4.png" id="8_tcxnu"]

[sub_resource type="GDScript" id="GDScript_5cwwk"]
script/source = "extends Character

const THROW_FORCE: int = 10

## Player's inventory data
@export var inventory_data: InventoryData

## Player's equipment data
@export var equipment_data: InventoryData

## Player's reach for interaction
@export var reach: int = 100

@onready var interact_area: Area2D = $InteractArea
@onready var interactions: VBoxContainer = $UI/Interactions
@onready var action_name: Label = $UI/Interactions/ActionName
@onready var interact_name: Label = $UI/Interactions/InteractName
@onready var sprites: Node2D = $Sprites
@onready var animated_sprite: AnimatedSprite2D = $Sprites/AnimatedSprite
@onready var holster_a: Node2D = $Sprites/Back/HolsterA
@onready var holster_b: Node2D = $Sprites/Back/HolsterB
@onready var hand: Node2D = $Sprites/Hand
@onready var animator: AnimationPlayer = $Animator

signal toggle_inventory
signal swap_weapon(index: int)

var worn_armours: Array[ArmourData] = []
var worn_weapons: Array[WeaponData] = [null, null, null]
var holsters: Array[Node2D]
var held_index = 2
var old_index = 2
var holstered = false
var speed = get_stat(\"speed\") * get_stat(\"speed_mult\")
var attacking = false

func init_setup() -> void:
	holsters = [holster_a, holster_b]
	equipment_data.inventory_updated.connect(on_equipment_updated)

func _unhandled_input(event: InputEvent) -> void:
	if Input.is_action_just_pressed(\"ui_cancel\"):
		get_tree().quit()
	
	if Input.is_action_just_pressed(\"inventory\"):
		toggle_inventory.emit()
	
	if Input.is_action_just_pressed(\"interact\"):
		if interact_area.has_overlapping_bodies():
			var interactable = get_closest_body(interact_area.get_overlapping_bodies())
			interactable.interact(self)
	
	if Input.is_action_just_pressed(\"weapon_A\"):
		if held_index != 0:
			holstered = false
			swap_held_weapon(0)
		else:
			holstered = true
			swap_held_weapon(2)
	
	if Input.is_action_just_pressed(\"weapon_B\"):
		if held_index != 1:
			holstered = false
			swap_held_weapon(1)
		else:
			holstered = true
			swap_held_weapon(2)
	
	if Input.is_action_just_pressed(\"holster\"):
		holstered = not holstered
		if holstered:
			swap_held_weapon(2)
		else:
			swap_held_weapon(old_index)

func _physics_process(delta) -> void:
	# Check if player is attacking
	if Input.is_action_pressed(\"primary\") and not attacking:
		if hand.get_children():
			hand.get_child(0).primary()
	
	if Input.is_action_pressed(\"secondary\") and not attacking:
		if hand.get_children():
			hand.get_child(0).secondary()
	
	# Update interract area
	interactions.hide()
	if interact_area.has_overlapping_bodies():
		var interactable = get_closest_body(interact_area.get_overlapping_bodies())
		action_name.text = interactable.get_action_name()
		interact_name.text = interactable.get_interact_name()
		interactions.position = interactable.position
		interactions.show()
	
	# Get the input direction and handle the movement/deceleration.
	speed = get_stat(\"speed\") * get_stat(\"speed_mult\")
	var direction = Input.get_vector(\"move_left\", \"move_right\", \"move_up\", \"move_down\").normalized()
	if direction:
		if direction.x > 0 and not attacking:
			sprites.scale.x = 1
		elif direction.x < 0 and not attacking:
			sprites.scale.x = -1
		animator.play(\"walk\")
		velocity = direction * speed
	else:
		animator.play(\"idle\")
		velocity.x = move_toward(velocity.x, 0, speed)
		velocity.y = move_toward(velocity.y, 0, speed)

	move_and_slide()

func on_equipment_updated(equipment_data: InventoryData) -> void:
	# Clear old equipment
	for child in hand.get_children():
		hand.remove_child(child)
	worn_armours.clear()
	# Fetch new equipment
	var equipment: Array[SlotData] = equipment_data.slot_datas
	# Equip new armours
	equip_armours(equipment.slice(0, 4))
	# Equip new weapons
	equip_weapons(equipment.slice(4, 6))
	# Update new stats
	update_stats()

func equip_armours(armours: Array[SlotData]) -> void:
	for armour in armours:
		if armour:
			equip_armour(armour.item_data)

func equip_armour(armour: ArmourData) -> void:
	worn_armours.append(armour)

func equip_weapons(weapons: Array[SlotData]) -> void:
	for i in weapons.size():
		equip_weapon(i, holsters[i], weapons[i])

func equip_weapon(index: int, holster: Node2D, weapon: SlotData) -> void:
	worn_weapons[index] = null
	for child in holster.get_children():
		holster.remove_child(child)
	if weapon:
		if held_index == index:
			swap_held_weapon(2)
		worn_weapons[index] = weapon.item_data
		holster.add_child(Globals.create_weapon(weapon.item_data))

func update_stats() -> void:
	reset_stats()
	apply_buffs()
	apply_armour_stats()

func apply_armour_stats() -> void:
	for armour in worn_armours:
		mod_stat(\"defence\", armour.defence)
		for sm in armour.stat_modifiers:
			mod_stat(sm.get_stat(), sm.get_value())
		for dm in armour.damage_modifiers:
			mod_damage_mult(dm.get_stat(), dm.get_value())
		for rm in armour.resist_modifiers:
			mod_damage_resist(rm.get_stat(), rm.get_value())

func swap_held_weapon(index: int) -> void:
	if worn_weapons[held_index]:
		holster_weapon(held_index)
	old_index = held_index
	held_index = index
	swap_weapon.emit(held_index)
	if worn_weapons[held_index]:
		hold_weapon(held_index)

func hold_weapon(index) -> void:
	for child in holsters[index].get_children():
		holsters[index].remove_child(child)
	var weapon = Globals.create_weapon(worn_weapons[index])
	weapon.attack.connect(on_weapon_attack)
	weapon.idle.connect(on_weapon_idle)
	hand.add_child(weapon)
	attacking = false

func holster_weapon(index) -> void:
	for child in hand.get_children():
		child.attack.disconnect(on_weapon_attack)
		child.idle.disconnect(on_weapon_idle)
		hand.remove_child(child)
	holsters[index].add_child(Globals.create_weapon(worn_weapons[index]))
	attacking = false

func get_closest_body(bodies: Array[Node2D]) -> Node2D:
	if bodies.size() == 1:
		return bodies[0]
	var closest = bodies[0]
	for body in bodies:
		if position.distance_to(body.position) < position.distance_to(closest.position):
			closest = body
	return closest

func on_weapon_attack() -> void:
	attacking = true
	var mouse = get_global_mouse_position()
	sprites.scale.x = 1
	if mouse.x < position.x:
		sprites.scale.x = -1
	hand.look_at(mouse)

func on_weapon_idle() -> void:
	hand.rotation_degrees = 0
	attacking = false
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_t4n5u"]
size = Vector2(9, 9)

[sub_resource type="CircleShape2D" id="CircleShape2D_dbmv1"]
radius = 25.0

[sub_resource type="Animation" id="Animation_obri6"]
resource_name = "idle"
length = 0.60002
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprites/Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [ExtResource("2_glu7w"), ExtResource("3_4nb8b"), ExtResource("4_nsggh")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprites/Hand:position")
tracks/1/interp = 0
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 0,
"values": [Vector2(3, -1), Vector2(3, -2), Vector2(3, -1.5)]
}

[sub_resource type="Animation" id="Animation_8a8m6"]
resource_name = "walk"
length = 0.80002
loop_mode = 1
step = 0.2
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprites/Sprite2D:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 1,
"values": [ExtResource("5_vaqin"), ExtResource("6_ewpi5"), ExtResource("7_c2lyn"), ExtResource("8_tcxnu")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Sprites/Hand:position")
tracks/1/interp = 0
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4, 0.6),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector2(3, -1), Vector2(3, -2), Vector2(3, -1), Vector2(3, -2)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_uk3ic"]
_data = {
"idle": SubResource("Animation_obri6"),
"walk": SubResource("Animation_8a8m6")
}

[node name="Player" type="CharacterBody2D"]
collision_layer = 2
motion_mode = 1
floor_stop_on_slope = false
script = SubResource("GDScript_5cwwk")

[node name="Sprites" type="Node2D" parent="."]

[node name="Back" type="Node2D" parent="Sprites"]

[node name="HolsterA" type="Node2D" parent="Sprites/Back"]
position = Vector2(-1, -3)
rotation = -0.261799

[node name="HolsterB" type="Node2D" parent="Sprites/Back"]
position = Vector2(0, -3)
rotation = 0.261799

[node name="Hand" type="Node2D" parent="Sprites"]
position = Vector2(3, -1)

[node name="Sprite2D" type="Sprite2D" parent="Sprites"]
texture = ExtResource("2_glu7w")
offset = Vector2(1.5, -10)

[node name="CollisionShape" type="CollisionShape2D" parent="."]
position = Vector2(0, 0.5)
shape = SubResource("RectangleShape2D_t4n5u")

[node name="InteractArea" type="Area2D" parent="."]
visible = false
collision_layer = 4
collision_mask = 4
input_pickable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="InteractArea"]
shape = SubResource("CircleShape2D_dbmv1")

[node name="UI" type="CanvasLayer" parent="."]
follow_viewport_enabled = true

[node name="Interactions" type="VBoxContainer" parent="UI"]
visible = false
offset_right = 40.0
offset_bottom = 40.0
theme_override_constants/separation = 0

[node name="ActionName" type="Label" parent="UI/Interactions"]
layout_mode = 2
size_flags_horizontal = 4
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 4
text = "AHH"

[node name="InteractName" type="Label" parent="UI/Interactions"]
layout_mode = 2
size_flags_horizontal = 4
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 4
text = "AHH"

[node name="Camera2D" type="Camera2D" parent="."]
zoom = Vector2(3, 3)
position_smoothing_enabled = true

[node name="Animator" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_uk3ic")
}
